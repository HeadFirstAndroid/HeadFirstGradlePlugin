import me.yifeiyuan.buildsrctest.DirectPlugin

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'me.yifeiyuan.buildsrctest' //通过 pluginid 引用
apply plugin: DirectPlugin //通过类名引用

//apply plugin: 'me.yifeiyuan.myplugin'
//apply plugin: 'me.yifeiyuan.myplugin2'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "me.yifeiyuan.headfirstgradleplugin"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
//    implementation project(path: ':standalone-plugin')
}


class GreetingPluginExtension {

    String message = 'Hello from GreetingPlugin extension'

    String greeter = "Gradle"
}

class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {

       def extension = target.extensions.create('greeting', GreetingPluginExtension)

        target.task("hello") {
            doLast {
                println  "${extension.message} from ${extension.greeter}"
            }
        }
    }
}

apply plugin: GreetingPlugin
// ./gradlew -q hello

greeting {
    message = "Hi,"
    greeter = "程序亦非猿"
}

class GreetingToFileTask extends DefaultTask {

    def destination

    @OutputFile
    File getDestination() {
        project.file(destination)
    }

    @TaskAction
    def greet() {
        def file = getDestination()
        file.parentFile.mkdirs()
        file.write 'Hello!111'
    }
}

task greet(type: GreetingToFileTask) {
    destination = { project.greetingFile }
}

task sayGreeting(dependsOn: greet) {
    doLast {
        println file(greetingFile).text
    }
}

ext.greetingFile = "$buildDir/hello.txt"